{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["NegociacaoService","_http","HttpService","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","then","negociacoes","reduce","arrayAchatado","array","concat","catch","Error","erro","resolve","reject","get","map","Negociacao","Date","obj","data","quantidade","valor","console","log","negociacao","ConnectionFactory","getConnection","NegociacaoDao","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","isEquals","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import {HttpService} from './HttpService';\n\nexport class NegociacaoService{\n    \n    constructor(){\n    \n        this._http = new HttpService();\n    }\n    \n    obterNegociacoes(){\n        \n        return Promise\n            .all([\n                this.obterNegociacoesDaSemana(),\n                this.obterNegociacoesDaSemanaAnterior(),\n                this.obterNegociacoesDaSemanaRetrasada()\n            ])\n            .then(negociacoes => \n                  negociacoes\n                    .reduce((arrayAchatado, array) => arrayAchatado.concat(array), []))\n            .catch(erro => {\n                throw new Error(erro);\n            });\n    }\n    \n    obterNegociacoesDaSemana(){\n        \n        return new Promise((resolve, reject) => {\n            \n            this._http\n                .get('negociacoes/semana')\n                .then(negociacoes => \n                    resolve(negociacoes.map(obj => new Negociacao(new Date(obj.data), obj.quantidade, obj.valor))))\n                .catch(erro => {\n                    console.log(erro);\n                    reject('Não foi possível obter as negociações da semana');\n                });\n        });\n    }\n    \n    obterNegociacoesDaSemanaAnterior(){\n        \n        return new Promise((resolve, reject) => {\n            \n            this._http\n                .get('negociacoes/anterior')\n                .then(negociacoes => \n                    resolve(negociacoes.map(obj => new Negociacao(new Date(obj.data), obj.quantidade, obj.valor))))\n                .catch(erro => {\n                    console.log(erro);\n                    reject('Não foi possível obter as negociações da semana anterior');\n                });\n        });\n        \n    }\n    \n    obterNegociacoesDaSemanaRetrasada(){\n        \n        return new Promise((resolve, reject) => {\n            \n            this._http\n                .get('negociacoes/retrasada')\n                .then(negociacoes => \n                    resolve(negociacoes.map(obj => new Negociacao(new Date(obj.data), obj.quantidade, obj.valor))))\n                .catch(erro => {\n                    console.log(erro);\n                    reject('Não foi possível obter as negociações da semana retrasada');\n                });\n        });\n    }\n\n    cadastra(negociacao){\n\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.adiciona(negociacao))\n            .then(() => 'Negociação adicionada com sucesso.')\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possivel adicionar a negociacao');\n            });\n    }\n\n    lista(){\n\n        return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.listaTodos())\n            .catch(erro => {\n\n                console.log(erro);\n                throw new Error('Não foi possível obter as negociações.');\n            })\n    }\n\n    apaga(){\n\n       return ConnectionFactory\n            .getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.apagaTodos())\n            .then(() => 'Negociacoes apagadas com sucesso.')\n            .catch(erro => {\n\n                console.log(erro);\n                throw new Error('\u001cNão foi possivel apagar as negociacoes');\n            });\n    }\n\n    importa(listaAtual){\n\n        return this.obterNegociacoes()\n            .then(negociacoes => negociacoes.filter(negociacao =>\n                !listaAtual.some(negociacaoExistente =>\n                    negociacao.isEquals(negociacaoExistente)))\n            )\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível obter as negociacões.');\n            });\n    }\n}"]}