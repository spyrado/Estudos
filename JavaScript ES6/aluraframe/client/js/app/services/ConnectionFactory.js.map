{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;AAAA,IAAMA,SAAS,CAAC,aAAD,CAAf;AAAA,IACAC,UAAU,CADV;AAAA,IAEAC,SAAS,YAFT;;AAIA,IAAIC,aAAa,IAAjB;AAAA,IACAC,QAAQ,IADR;;IAGaC,iB,WAAAA,iB;AAET,iCAAa;AAAA;;AACT,cAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;;;wCAEqB;;AAElB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,oBAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA6BD,OAA7B,CAAlB;;AAEAS,4BAAYI,eAAZ,GAA8B,aAAK;AAC/BT,sCAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,iBAFD;;AAIAR,4BAAYS,SAAZ,GAAwB,aAAK;;AAEzB,wBAAG,CAAChB,UAAJ,EAAgBA,aAAaa,EAAEC,MAAF,CAASC,MAAtB;AAChBd,4BAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,+BAAWC,KAAX,GAAmB,YAAU;AACzB,8BAAM,IAAIE,KAAJ,CAAU,+CAAV,CAAN;AACH,qBAFD;AAGAE,4BAAQL,UAAR;AACH,iBARD;;AAUAO,4BAAYW,OAAZ,GAAsB,aAAK;AACvBC,4BAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,2BAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,iBAHD;AAKH,aAvBM,CAAP;AAwBH;;;sCAEoBtB,U,EAAW;AAC5BH,mBAAO0B,OAAP,CAAe,iBAAS;AACpB,oBAAGvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EACI1B,WAAW2B,iBAAX,CAA6BD,KAA7B;;AAEJ1B,2BAAW4B,iBAAX,CAA6BF,KAA7B,EAAmC,EAACG,eAAe,IAAhB,EAAnC;AACH,aALD;AAMH;;;0CAEuB;AACpB,gBAAG7B,UAAH,EAAc;AACVC;AACAD,6BAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes'],\nversion = 4,\ndbName = 'aluraframe';\n\nlet connection = null,\nclose = null;\n\nexport class ConnectionFactory{\n    \n    constructor(){\n        throw new Error('Não é possivel criar instãncias de ConnectionFactory');\n    }\n    \n    static getConnection(){\n        \n        return new Promise((resolve, reject) => {\n            \n            let openRequest = window.indexedDB.open(dbName,version);\n            \n            openRequest.onupgradeneeded = e => {\n                ConnectionFactory._createStores(e.target.result);\n            };\n            \n            openRequest.onsuccess = e => {\n                \n                if(!connection) connection = e.target.result;\n                close = connection.close.bind(connection);\n                connection.close = function(){\n                    throw new Error('Voce não pode encerrar a conexao diretamente.');\n                }\n                resolve(connection);\n            };\n            \n            openRequest.onerror = e => {\n                console.log(e.target.error);\n                reject(e.target.error.name);\n            };\n            \n        });\n    }\n\n    static _createStores(connection){\n        stores.forEach(store => {\n            if(connection.objectStoreNames.contains(store))\n                connection.deleteObjectStore(store);\n\n            connection.createObjectStore(store,{autoIncrement: true});\n        });\n    }\n    \n    static closeConnection(){\n        if(connection){\n            close();\n            connection = null;\n        }\n    }\n}"]}