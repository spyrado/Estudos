{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,kB,GAAS,CAAC,aAAD,C;AACfC,mB,GAAU,C;AACVC,kB,GAAS,Y;AAELC,sB,GAAa,I;AACjBC,iB,GAAQ,I;;yCAEKC,iB;AAET,6CAAa;AAAA;;AACT,0BAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;;;oDAEqB;;AAElB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA6BD,OAA7B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,aAAK;AAC/BT,kDAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,6BAFD;;AAIAR,wCAAYS,SAAZ,GAAwB,aAAK;;AAEzB,oCAAG,CAAChB,UAAJ,EAAgBA,aAAaa,EAAEC,MAAF,CAASC,MAAtB;AAChBd,wCAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,2CAAWC,KAAX,GAAmB,YAAU;AACzB,0CAAM,IAAIE,KAAJ,CAAU,+CAAV,CAAN;AACH,iCAFD;AAGAE,wCAAQL,UAAR;AACH,6BARD;;AAUAO,wCAAYW,OAAZ,GAAsB,aAAK;AACvBC,wCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,uCAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,6BAHD;AAKH,yBAvBM,CAAP;AAwBH;;;kDAEoBtB,U,EAAW;AAC5BH,+BAAO0B,OAAP,CAAe,iBAAS;AACpB,gCAAGvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EACI1B,WAAW2B,iBAAX,CAA6BD,KAA7B;;AAEJ1B,uCAAW4B,iBAAX,CAA6BF,KAA7B,EAAmC,EAACG,eAAe,IAAhB,EAAnC;AACH,yBALD;AAMH;;;sDAEuB;AACpB,4BAAG7B,UAAH,EAAc;AACVC;AACAD,yCAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes'],\nversion = 4,\ndbName = 'aluraframe';\n\nlet connection = null,\nclose = null;\n\nexport class ConnectionFactory{\n    \n    constructor(){\n        throw new Error('Não é possivel criar instãncias de ConnectionFactory');\n    }\n    \n    static getConnection(){\n        \n        return new Promise((resolve, reject) => {\n            \n            let openRequest = window.indexedDB.open(dbName,version);\n            \n            openRequest.onupgradeneeded = e => {\n                ConnectionFactory._createStores(e.target.result);\n            };\n            \n            openRequest.onsuccess = e => {\n                \n                if(!connection) connection = e.target.result;\n                close = connection.close.bind(connection);\n                connection.close = function(){\n                    throw new Error('Voce não pode encerrar a conexao diretamente.');\n                }\n                resolve(connection);\n            };\n            \n            openRequest.onerror = e => {\n                console.log(e.target.error);\n                reject(e.target.error.name);\n            };\n            \n        });\n    }\n\n    static _createStores(connection){\n        stores.forEach(store => {\n            if(connection.objectStoreNames.contains(store))\n                connection.deleteObjectStore(store);\n\n            connection.createObjectStore(store,{autoIncrement: true});\n        });\n    }\n    \n    static closeConnection(){\n        if(connection){\n            close();\n            connection = null;\n        }\n    }\n}"]}