{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["NegociacaoDao","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","onerror","console","log","e","target","error","cursor","openCursor","negociacoes","atual","result","dado","value","push","Negociacao","_data","_quantidade","_valor","continue","clear"],"mappings":";;;;;;IAAMA,a;AAEF,2BAAYC,UAAZ,EAAuB;AAAA;;AAEnB,aAAKC,WAAL,GAAmBD,UAAnB;AACA,aAAKE,MAAL,GAAc,aAAd;AACH;;;;iCAEQC,U,EAAW;AAAA;;AAChB,mBAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAASC,MAAT,EAAoB;;AAEnC;AACA;AACA;AACA;AACA,oBAAIC,UAAU,MAAKN,WAAL,CACTO,WADS,CACG,CAAC,MAAKN,MAAN,CADH,EACkB,WADlB,EAETO,WAFS,CAEG,MAAKP,MAFR,EAGTQ,GAHS,CAGLP,UAHK,CAAd;;AAKAI,wBAAQI,SAAR,GAAoB,aAAK;AACrBN;AACH,iBAFD;;AAIAE,wBAAQK,OAAR,GAAkB,aAAK;;AAEnBC,4BAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX;AACH,iBAJD;AAKH,aApBM,CAAP;AAqBH;;;qCAEW;AAAA;;AACR,mBAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAASC,MAAT,EAAoB;AACnC;AACA;AACA;AACA;AACA,oBAAIY,SAAS,OAAKjB,WAAL,CACRO,WADQ,CACI,CAAC,OAAKN,MAAN,CADJ,EACmB,WADnB,EAERO,WAFQ,CAEI,OAAKP,MAFT,EAGRiB,UAHQ,EAAb;;AAKA,oBAAIC,cAAc,EAAlB;;AAEAF,uBAAOP,SAAP,GAAmB,aAAK;AACpB;AACA,wBAAIU,QAAQN,EAAEC,MAAF,CAASM,MAArB;AACA;AACA,wBAAGD,KAAH,EAAS;AACL;AACA,4BAAIE,OAAOF,MAAMG,KAAjB;;AAEAJ,oCAAYK,IAAZ,CAAiB,IAAIC,UAAJ,CAAeH,KAAKI,KAApB,EAA2BJ,KAAKK,WAAhC,EAA6CL,KAAKM,MAAlD,CAAjB;AACA;AACA;AACAR,8BAAMS,QAAN;AACH,qBARD,MAQK;AACD;AACAzB,gCAAQe,WAAR;AACH;AACJ,iBAhBD;;AAkBAF,uBAAON,OAAP,GAAiB,aAAK;;AAElBC,4BAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX;AACH,iBAJD;AAKH,aAnCM,CAAP;AAoCH;;;qCAEW;AAAA;;AAER,mBAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,oBAAIC,UAAU,OAAKN,WAAL,CACTO,WADS,CACG,CAAC,OAAKN,MAAN,CADH,EACkB,WADlB,EAETO,WAFS,CAEG,OAAKP,MAFR,EAGT6B,KAHS,EAAd;;AAKAxB,wBAAQI,SAAR,GAAoB;AAAA,2BAAKN,kDAAL;AAAA,iBAApB;;AAEAE,wBAAQK,OAAR,GAAkB,aAAK;;AAEnBC,4BAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX;AACH,iBAJD;AAMH,aAfM,CAAP;AAgBH","file":"NegociacaoDao.js","sourcesContent":["class NegociacaoDao {\n\n    constructor(connection){\n\n        this._connection = connection;\n        this._store = 'negociacoes';\n    }\n\n    adiciona(negociacao){\n        return new Promise((resolve,reject) => {\n            \n            //Precisamos de uma transacao para poder gravar dentro da objectStore\n            //Crio uma transacao\n            //Aponto para qual objectStore eu quero acessar.\n            //Peco para adicionar minha negociacao ao store\n            let request = this._connection\n                .transaction([this._store], 'readwrite')\n                .objectStore(this._store)\n                .add(negociacao);\n\n            request.onsuccess = e => {\n                resolve();\n            }\n\n            request.onerror = e => {\n\n                console.log(e.target.error);\n                reject(`Não foi possível adicionar a negociação.`);\n            }\n        });\n    }\n\n    listaTodos(){\n        return new Promise((resolve,reject) => {\n            //Precisamos de uma transacao para poder gravar dentro da objectStore\n            //Crio uma transacao\n            //Aponto para qual objectStore eu quero acessar.\n            //Ele aponta para cada linha da nossa objectSore, esse é o cara que vai 'passear'por la\n            let cursor = this._connection\n                .transaction([this._store], 'readwrite')\n                .objectStore(this._store)\n                .openCursor();\n            \n            let negociacoes = [];\n            \n            cursor.onsuccess = e => {\n                //Recebe o ponteiro\n                let atual = e.target.result;\n                // Verifica se o ponteiro existe(se tem dado no ponteiro)\n                if(atual){\n                    // recebo o valor do ponteiro, apenas as propriedades q recebo\n                    let dado = atual.value;\n                    \n                    negociacoes.push(new Negociacao(dado._data, dado._quantidade, dado._valor));\n                    // Pedindo para o indexedDB ir para a proxima negociacao,\n                    //Quando chamamos o continue, ele chama o metodo onsuccess novamente, e assim ele vai dar esse loop ate n ter mais dado para apontar\n                    atual.continue();\n                }else{\n                    //Depois que varrer todos os itens do banco, essa lista estará pronta\n                    resolve(negociacoes);\n                }\n            }\n            \n            cursor.onerror = e => {\n\n                console.log(e.target.error);\n                reject(`Não foi possivel listar as negociações.`);\n            } \n        });\n    }\n\n    apagaTodos(){\n        \n        return new Promise((resolve, reject) => {\n\n            let request = this._connection\n                .transaction([this._store], 'readwrite')\n                .objectStore(this._store)\n                .clear();\n            \n            request.onsuccess = e => resolve(`Negociações apagadas com sucesso.`);\n\n            request.onerror = e => {\n\n                console.log(e.target.error);\n                reject(`Erro ao apagar negociações`)\n            }\n\n        });\n    }\n}"]}