{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["Negociacao","NegociacaoDao","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","onerror","console","log","e","target","error","cursor","openCursor","negociacoes","atual","result","dado","value","push","_data","_quantidade","_valor","continue","clear"],"mappings":";;;;;;;;;;;;;;;AAAQA,sB,qBAAAA,U;;;;;;;;;;;;;;;;;;;;;qCAEKC,a;AAET,uCAAYC,UAAZ,EAAuB;AAAA;;AAEnB,yBAAKC,WAAL,GAAmBD,UAAnB;AACA,yBAAKE,MAAL,GAAc,aAAd;AACH;;;;6CAEQC,U,EAAW;AAAA;;AAChB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAASC,MAAT,EAAoB;;AAEnC;AACA;AACA;AACA;AACA,gCAAIC,UAAU,MAAKN,WAAL,CACTO,WADS,CACG,CAAC,MAAKN,MAAN,CADH,EACkB,WADlB,EAETO,WAFS,CAEG,MAAKP,MAFR,EAGTQ,GAHS,CAGLP,UAHK,CAAd;;AAKAI,oCAAQI,SAAR,GAAoB,aAAK;AACrBN;AACH,6BAFD;;AAIAE,oCAAQK,OAAR,GAAkB,aAAK;;AAEnBC,wCAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX;AACH,6BAJD;AAKH,yBApBM,CAAP;AAqBH;;;iDAEW;AAAA;;AACR,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAASC,MAAT,EAAoB;AACnC;AACA;AACA;AACA;AACA,gCAAIY,SAAS,OAAKjB,WAAL,CACRO,WADQ,CACI,CAAC,OAAKN,MAAN,CADJ,EACmB,WADnB,EAERO,WAFQ,CAEI,OAAKP,MAFT,EAGRiB,UAHQ,EAAb;;AAKA,gCAAIC,cAAc,EAAlB;;AAEAF,mCAAOP,SAAP,GAAmB,aAAK;AACpB;AACA,oCAAIU,QAAQN,EAAEC,MAAF,CAASM,MAArB;AACA;AACA,oCAAGD,KAAH,EAAS;AACL;AACA,wCAAIE,OAAOF,MAAMG,KAAjB;;AAEAJ,gDAAYK,IAAZ,CAAiB,IAAI3B,UAAJ,CAAeyB,KAAKG,KAApB,EAA2BH,KAAKI,WAAhC,EAA6CJ,KAAKK,MAAlD,CAAjB;AACA;AACA;AACAP,0CAAMQ,QAAN;AACH,iCARD,MAQK;AACD;AACAxB,4CAAQe,WAAR;AACH;AACJ,6BAhBD;;AAkBAF,mCAAON,OAAP,GAAiB,aAAK;;AAElBC,wCAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX;AACH,6BAJD;AAKH,yBAnCM,CAAP;AAoCH;;;iDAEW;AAAA;;AAER,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIC,UAAU,OAAKN,WAAL,CACTO,WADS,CACG,CAAC,OAAKN,MAAN,CADH,EACkB,WADlB,EAETO,WAFS,CAEG,OAAKP,MAFR,EAGT4B,KAHS,EAAd;;AAKAvB,oCAAQI,SAAR,GAAoB;AAAA,uCAAKN,kDAAL;AAAA,6BAApB;;AAEAE,oCAAQK,OAAR,GAAkB,aAAK;;AAEnBC,wCAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX;AACH,6BAJD;AAMH,yBAfM,CAAP;AAgBH","file":"NegociacaoDao.js","sourcesContent":["import {Negociacao} from '../models/Negociacao';\n\nexport class NegociacaoDao {\n\n    constructor(connection){\n\n        this._connection = connection;\n        this._store = 'negociacoes';\n    }\n\n    adiciona(negociacao){\n        return new Promise((resolve,reject) => {\n            \n            //Precisamos de uma transacao para poder gravar dentro da objectStore\n            //Crio uma transacao\n            //Aponto para qual objectStore eu quero acessar.\n            //Peco para adicionar minha negociacao ao store\n            let request = this._connection\n                .transaction([this._store], 'readwrite')\n                .objectStore(this._store)\n                .add(negociacao);\n\n            request.onsuccess = e => {\n                resolve();\n            }\n\n            request.onerror = e => {\n\n                console.log(e.target.error);\n                reject(`Não foi possível adicionar a negociação.`);\n            }\n        });\n    }\n\n    listaTodos(){\n        return new Promise((resolve,reject) => {\n            //Precisamos de uma transacao para poder gravar dentro da objectStore\n            //Crio uma transacao\n            //Aponto para qual objectStore eu quero acessar.\n            //Ele aponta para cada linha da nossa objectSore, esse é o cara que vai 'passear'por la\n            let cursor = this._connection\n                .transaction([this._store], 'readwrite')\n                .objectStore(this._store)\n                .openCursor();\n            \n            let negociacoes = [];\n            \n            cursor.onsuccess = e => {\n                //Recebe o ponteiro\n                let atual = e.target.result;\n                // Verifica se o ponteiro existe(se tem dado no ponteiro)\n                if(atual){\n                    // recebo o valor do ponteiro, apenas as propriedades q recebo\n                    let dado = atual.value;\n                    \n                    negociacoes.push(new Negociacao(dado._data, dado._quantidade, dado._valor));\n                    // Pedindo para o indexedDB ir para a proxima negociacao,\n                    //Quando chamamos o continue, ele chama o metodo onsuccess novamente, e assim ele vai dar esse loop ate n ter mais dado para apontar\n                    atual.continue();\n                }else{\n                    //Depois que varrer todos os itens do banco, essa lista estará pronta\n                    resolve(negociacoes);\n                }\n            }\n            \n            cursor.onerror = e => {\n\n                console.log(e.target.error);\n                reject(`Não foi possivel listar as negociações.`);\n            } \n        });\n    }\n\n    apagaTodos(){\n        \n        return new Promise((resolve, reject) => {\n\n            let request = this._connection\n                .transaction([this._store], 'readwrite')\n                .objectStore(this._store)\n                .clear();\n            \n            request.onsuccess = e => resolve(`Negociações apagadas com sucesso.`);\n\n            request.onerror = e => {\n\n                console.log(e.target.error);\n                reject(`Erro ao apagar negociações`)\n            }\n\n        });\n    }\n}"]}